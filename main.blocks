<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="xRRgvHNlG#rZ^u`HECiY" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="LUxpN7o-`_s~gSQzlH|."><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace custom {" line1="" line2="    // タイヤの左右を選択するための設定" line3="    export enum TireDirection {" line4="        //% block=&quot;右&quot;" line5="        Right," line6="        //% block=&quot;左&quot;" line7="        Left" line8="    }" line9="" line10="    // タイヤの動作を選択するための設定" line11="    export enum TireAction {" line12="        //% block=&quot;回す&quot;" line13="        Move," line14="        //% block=&quot;止める&quot;" line15="        Stop" line16="    }" line17="" line18="    // センサーの左右を選択するための設定" line19="    export enum SensorDirection {" line20="        //% block=&quot;右&quot;" line21="        Right," line22="        //% block=&quot;左&quot;" line23="        Left" line24="    }" line25="" line26="    // ===================================" line27="    // ここからモーター制御のブロック" line28="    // ===================================" line29="" line30="    /**" line31="     * 指定したタイヤを回す、または止めます。" line32="     * @param direction 操作するタイヤ（右:P13, 左:P15）" line33="     * @param action 行う動作（回す/止める）" line34="     */" line35="    //% block=&quot;%direction のタイヤを %action&quot;" line36="    //% group=&quot;モーター制御&quot;" line37="    export function controlTire(direction: TireDirection, action: TireAction): void {" line38="        const moveSpeed = 500; // 「回す」ときの速さ。この値を変更すると速さが変わります。" line39="        let targetPin: AnalogPin;" line40="        let output = 0;" line41="" line42="        // 操作するタイヤのピンを決定" line43="        if (direction == TireDirection.Left) {" line44="            targetPin = AnalogPin.P15;" line45="        } else {" line46="            targetPin = AnalogPin.P13;" line47="        }" line48="" line49="        // 行う動作に応じて出力を決定" line50="        if (action == TireAction.Move) {" line51="            output = moveSpeed;" line52="        } else {" line53="            output = 0;" line54="        }" line55="" line56="        // 決定したピンに出力を設定" line57="        pins.analogWritePin(targetPin, output);" line58="    }" line59="" line60="" line61="    // ===================================" line62="    // ここからセンサーのブロック" line63="    // ===================================" line64="" line65="    /**" line66="     * 指定した方向のセンサーが白を検出したかどうかを判定します。" line67="     * センサーのアナログ値が700未満の場合に「白」と判定します。" line68="     * @param direction 判定するセンサーの方向（右:P0, 左:P1）" line69="     */" line70="    //% block=&quot;%direction のセンサが白だったら&quot;" line71="    //% group=&quot;センサー&quot;" line72="    export function isWhite(direction: SensorDirection): boolean {" line73="        const threshold = 700; // 白と判定するアナログ値のしきい値（この値は環境に応じて調整してください）" line74="        let sensorValue = 0;" line75="" line76="        if (direction == SensorDirection.Left) {" line77="            // 左センサー (P1) の値を読み取る" line78="            sensorValue = pins.analogReadPin(AnalogPin.P1);" line79="        } else {" line80="            // 右センサー (P0) の値を読み取る" line81="            sensorValue = pins.analogReadPin(AnalogPin.P0);" line82="        }" line83="" line84="        // センサーの値がしきい値未満なら true (白)、そうでなければ false を返す" line85="        return sensorValue &lt; threshold;" line86="    }" line87="}" numlines="88"></mutation></block></statement></block></xml>